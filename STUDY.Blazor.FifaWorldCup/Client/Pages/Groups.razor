@page "/group/{Group}"
@using STUDY.Blazor.FifaWorldCup.Shared
@using STUDY.Blazor.FifaWorldCup.Shared.Models
@inject HttpClient Http

<table class="table">
    <thead>
        <tr>
            <th></th>
            <th></th>
            <th>MP</th>
            <th>Pts</th>
            <th>G</th>
            <th>GA</th>
            <th>GD</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var t in teams)
        {
            <tr>
                <td><img src=@($"/img/{t.Name.ToString().ToLower()}.png") /></td>
                <td>@t.Name</td>
                <td>@t.MatchesPlayed</td>
                <td>@t.Points</td>
                <td>@t.Goals</td>
                <td>@t.GoalsAgainst</td>
                <td>@t.GoalsDifference</td>
            </tr>
        }
    </tbody>
</table>

@foreach (var m in matches)
{
    <Input match="@m" />
}

@code {
    [Parameter]
    public string Group { get; set; }
    protected List<Match> matches = new();
    protected List<Team> teams = new();

    Match match = new();

    [Parameter] public EventCallback OnValidSubmit { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        await Fetch();
    }

    protected async Task Fetch()
    {
        var group = Enum.Parse<Seed>(Group);
        teams.Clear();

        try
        {
            matches = await Http.GetFromJsonAsync<List<Match>>("api/Matches");
            matches = matches.Where(x => x.Seed == group).ToList();
            teams = Helpers.GetTeams(matches);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
}

<style>
    .table {
        width: 700px;
        vertical-align: middle;
    }
</style>